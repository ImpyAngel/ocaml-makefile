{
  "name": "Ocaml-makefile",
  "tagline": "Easy to use Makefile for small to medium-sized OCaml-projects",
  "body": "OCamlMakefile - A Simple Generic Makefile for [OCaml](http://www.ocaml.org)-Projects\r\n====================================================================================\r\n\r\n---------------------------------------------------------------------------\r\n\r\nPrerequisites\r\n-------------\r\n\r\n  * GNU-Make version 3.80 or higher\r\n\r\nPros\r\n----\r\n\r\n  * It is well-tested across multiple platforms and has been used in many\r\n    projects.\r\n\r\n  * It generates dependencies correctly by ensuring that all automatically\r\n    generated OCaml-files exist before dependency calculation.  This is the\r\n    only way to guarantee that `ocamldep` can do its job.\r\n\r\n  * Convenience.  Even fairly complex compilation processes (see example\r\n    `calc.ml`) need only little information to work correctly, sometimes\r\n    just about the minimum (filenames of sources).\r\n\r\nCons\r\n----\r\n\r\n  * It may not be a good choice in projects where many compilation units\r\n    require different flags.\r\n\r\n  * Though it can scale to medium-sized projects, large projects with,\r\n    for example, dependencies across multiple libraries in different\r\n    directories are not well-supported.\r\n\r\n    This is a general shortcoming of the already somewhat dated `make`.\r\n    You may want to investigate the following tools to approach larger\r\n    projects:\r\n\r\n      * [OMake](http://omake.metaprl.org/index.html)\r\n      * [Ocamlbuild](https://ocaml.org/learn/tutorials/ocamlbuild)\r\n      * [Oasis](http://oasis.forge.ocamlcore.org)\r\n\r\nUsage\r\n-----\r\n\r\nIt is recommended that first-time users take a look at the examples in the\r\ndistribution for a quick introduction.  `OCamlMakefile`-projects are often so\r\nsimple that they are self-explanatory.\r\n\r\nTo create your own project, first edit a project-specific `Makefile` in the\r\nappropriate directory.  There are two ways of making use of `OCamlMakefile`:\r\n\r\n  1. Have a look at the default settings in `OCamlMakefile` and set\r\n     them to the values that are valid on your system.   For example, check\r\n     whether the path to the standard libraries is ok, what executables shall\r\n     be used, etc.  Copy it into the directory of the project to be compiled.\r\n     Add the following statement as last line to your `Makefile`:\r\n\r\n     ```makefile\r\n     -include OCamlMakefile\r\n     ```\r\n\r\n  2. Put `OCamlMakefile` somewhere else in your system.  In this case you\r\n     will have to set the variable `OCAMLMAKEFILE` in your project-specific\r\n     `Makefile`.  This is the way in which the examples are written.  Now you\r\n     only need one version of `OCamlMakefile` to manage all of your projects!\r\n     See the examples for details.\r\n\r\nYou will usually need to specify two further variables for your project:\r\n\r\n  * `SOURCES`  (default: `foo.ml`)\r\n  * `RESULT`   (default: `foo`)\r\n\r\nPut all the sources necessary for a target into variable `SOURCES`.  Then set\r\n`RESULT` to the name of the target.  If you want to generate libraries,\r\nyou should _not_ specify the suffix (`.cma`, `.cmxa`, `.a`).  It will be\r\nadded automatically if you specify that you want to build a library.\r\n\r\n```text\r\n**      Don't forget to add the `.mli`-files, too!            **\r\n**  Don't forget that the order of the source files matters!  **\r\n```\r\n\r\nThe order is important, because it matters during linking due to potential\r\nside effects caused at program startup.  This is why `OCamlMakefile` does not\r\nattempt to partially order dependencies by itself, which might confuse users\r\neven more.  It just compiles and links OCaml-sources in the order specified\r\nby the user, even if it could determine automatically that the order cannot\r\nbe correct.\r\n\r\nThe minimum of your `Makefile` looks like this (assuming that `OCamlMakefile`\r\nis in the search path of `make`):\r\n\r\n```makefile\r\n-include OCamlMakefile\r\n```\r\n\r\nThis will assume that you want to compile a file `foo.ml` to a binary `foo`.\r\n\r\nOtherwise, your Makefile will probably contain something like this:\r\n\r\n```makefile\r\nSOURCES = foo.ml\r\nRESULT  = foo\r\n\r\n-include OCamlMakefile\r\n```\r\n\r\nBe careful with the names you put into these variables.  If they are wrong,\r\na `make clean` might erase the wrong files!\r\n\r\nA simple `make` will generate a byte-code executable.  If you want to change\r\nthis, you may add an `all`-rule that generates something else.  For example:\r\n\r\n```makefile\r\nSOURCES = foo.ml\r\nRESULT  = foo\r\n\r\nall: native-code-library\r\n\r\n-include OCamlMakefile\r\n```\r\n\r\nThis will build a native-code library `foo.cmxa` (+ `foo.a`) from file\r\n`foo.ml`.\r\n\r\nYou may even build several targets at once.  To produce byte- and native-code\r\nexecutables with one `make`, add the following rule:\r\n\r\n```makefile\r\nall: byte-code native-code\r\n```\r\n\r\nYou will probably want to use a different suffix for each of these targets\r\nso that the result will not be overwritten.  See the optional variables\r\nbelow for details.\r\n\r\nYou may also tell `make` at the command-line what kind of target to produce\r\n(e.g. `make nc`).  Here all the possibilities with shortcuts between\r\nparenthesis:\r\n\r\n```text\r\nbyte-code                      (bc)\r\nbyte-code-nolink               (bcnl) - no linking stage\r\nbyte-code-library              (bcl)\r\nnative-code                    (nc)\r\nnative-code-nolink             (ncnl) - no linking stage\r\nnative-code-library            (ncl)\r\ndebug-code                     (dc)\r\ndebug-code-nolink              (dcnl) - no linking stage\r\ndebug-code-library             (dcl)\r\nprofiling-byte-code            (pbc)\r\nprofiling-byte-code-library    (pbcl)\r\nprofiling-native-code          (pnc)\r\nprofiling-native-code-library  (pncl)\r\nbyte-code-dll                  (bcd)\r\nnative-code-dll                (ncd)\r\npack-byte-code                 (pabc)\r\npack-native-code               (panc)\r\ntoplevel                       (top)\r\nsubprojs\r\n```\r\n\r\nHere is a short note concerning building and linking byte code libraries\r\nwith C-files:\r\n\r\n> OCaml links C-object files only when they are used in an executable.\r\n> After compilation they should be placed in some directory that is in\r\n> your include path if you link your library against an executable.\r\n>\r\n> It is sometimes more convenient to link all C-object files into a\r\n> single C-library.  Then you have to override the automatic link flags\r\n> of your library using `-noautolink` and add another link flag that\r\n> links in your C-library explicitly.\r\n\r\nConcerning maintenance:\r\n\r\n  * `make clean` removes all (all!) automatically generated files.\r\n    So again, make sure your variables are ok!\r\n\r\n  * `make cleanup` is similar to `make clean` but keeps executables.\r\n\r\nAnother way to destroy some important files is by having `OCamlMakefile`\r\nautomatically generate files with the same name.  Read the documentation about\r\nthe tools in the OCaml-distribution to see what kind of files are generated.\r\n`OCamlMakefile` additionally generates (`%` is the basename of source file):\r\n\r\n  * `%_idl.c` - `camlidl` generates a file `%.c` from `%.idl`, but this is\r\n    not such a good idea, because when generating native-code, both the\r\n    file `%.c` and `%.ml` would generate files `%.o` which would overwrite\r\n    each other.  Thus, `OCamlMakefile` renames `%.c` to `%_idl.c` to work\r\n    around this problem.\r\n\r\nThe dependencies are stored in three different subdirectories (dot dirs):\r\n\r\n  * `._d` - contains dependencies for .ml-files\r\n  * `._bcdi` - contains byte code dependencies for .mli-files\r\n  * `._ncdi` - contains native code dependencies for .mli-files\r\n\r\nThe endings of the dependency files are: `%.d` for those generated from\r\n`%.ml`-files and `%.di` for ones derived from `%.mli`-files.\r\n\r\n### Debugging\r\n\r\nThis is easy: if you discover a bug, just do a `make clean; make dc` to\r\nrecompile your project with debugging information.  Then you can immediately\r\napply `ocamldebug` to the executable.\r\n\r\n### Profiling\r\n\r\nTo generate code that can be profiled with `ocamlprof` (byte code) or `gprof`\r\n(native code), compile your project with one of the profiling targets (see\r\ntargets above).  E.g.:\r\n\r\n  * `make pbc` will build byte code that can be profiled with `ocamlprof`.\r\n  * `make pnc` will build native code that can be profiled with `gprof`.\r\n\r\nPlease note that it is not currently possible to profile byte code with\r\nthreads.  `OCamlMakefile` will force an error if you try to do this.\r\n\r\nA short hint for DEC Alpha-users (under Digital Unix): you may also compile\r\nyour sources to native code without any further profiling options/targets.\r\nThen call `pixie my_exec`, `my_exec` being your executable.  This will produce\r\n(among other files) an executable `my_exec.pixie`.  Call it and it will produce\r\nprofiling information which can be analyzed using `prof -pixie my_exec`.\r\nThe resulting information is extremely detailed and allows analysis up to\r\nthe clock cycle level...\r\n\r\n### Using Preprocessors\r\n\r\nBecause any kind of program that reads from standard input and prints to\r\nstandard output can be used as a preprocessor, there cannot be any default\r\nway to handle all of them correctly without further knowledge.\r\n\r\nTherefore, you have to cooperate a bit with `OCamlMakefile` to let\r\npreprocessing happen automatically.  Basically, this only requires that you\r\nput a comment into the first line of files that should be preprocessed, e.g.:\r\n\r\n```ocaml\r\n(*pp cat *)\r\n(* ... rest of program ... *)\r\n```\r\n\r\n`OCamlMakefile` looks at the first line of your files, and if it finds a\r\ncomment that starts with \"`(*pp`\", then it will assume that the rest of\r\nthe comment tells it how to correctly call the appropriate preprocessor.\r\nIn this case the program `cat` will be called, which will, of course, just\r\noutput the source text again without changing it.\r\n\r\nIf, for example, you were an advocate of the \"revised syntax\", which is\r\nsupported by the `camlp4` preprocessor, you could simply write:\r\n\r\n```ocaml\r\n(*pp camlp4r *)\r\n(* ... rest of program in revised syntax ... *)\r\n```\r\n\r\nIf you want to write your own syntax extensions, just take a look at the\r\nexample in the directory `camlp4`: it implements the \"`repeat ... until`\"\r\nextension as described in the `camlp4`-tutorial.\r\n\r\n### Library (Un-)Installation Support\r\n\r\n`OCamlMakefile` contains two targets using `ocamlfind` for this purpose:\r\n\r\n  * `libinstall`\r\n  * `libuninstall`\r\n\r\nThese two targets require the existence of the variable `LIBINSTALL_FILES`,\r\nwhich should be set to all the files that you want to install in the\r\nlibrary directory (usually %.mli, %.cmi, %.cma, %.cmxa, %.a and possibly\r\nfurther C-libraries).  The target `libinstall` has the dependency `all`\r\nto force compilation of the library so make sure you define target `all`\r\nin your Makefile appropriately.\r\n\r\nThe targets inform the user about the configured install path and ask for\r\nconfirmation to (un)install there.  If you want to use them, it is often a\r\ngood idea to just alias them in your Makefile to `install` and `uninstall`\r\nrespectively.\r\n\r\nTwo other targets allow installation of files into a particular directory\r\n(without using `ocamlfind`):\r\n\r\n  * `rawinstall`\r\n  * `rawuninstall`\r\n\r\n### Building toplevels\r\n\r\nThere is just one target for this:\r\n\r\n  * `top`\r\n\r\nThe generated file can be used immediately for interactive sessions - even\r\nwith scanners, parsers, C-files, etc.!\r\n\r\n### Generating documentation\r\n\r\nThe following targets are supported:\r\n\r\n```text\r\nhtdoc      - generates HTML-documentation\r\nladoc      - generates Latex-documentation\r\npsdoc      - generates PostScript-documentation\r\npdfdoc     - generates PDF-documentation\r\ndoc        - generates all supported forms of documentation\r\nclean-doc  - generates all supported forms of documentation\r\n```\r\n\r\nAll of them generate a sub-directory `doc`.  More precisely, for HTML it\r\nis `doc/$(RESULT)/html` and for Latex, PostScript and PDF the directory\r\n`doc/$(RESULT)/latex`.  See the OCamldoc-manual for details and the optional\r\nvariables below for settings you can control.\r\n\r\n### Handling subprojects\r\n\r\nYou can have several targets in the same directory and manage them from\r\nwithin an single `Makefile`.\r\n\r\nGive each subproject a name, e.g. `p1`, `p2`, etc.  Then you export settings\r\nspecific to each project by using variables of the form `PROJ_p1`, `PROJ_p2`,\r\netc.  E.g.:\r\n\r\n```makefile\r\ndefine PROJ_p1\r\n  SOURCES=foo.ml main.ml\r\n  RESULT=\"p1\"\r\n  OCAMLFLAGS=\"-unsafe\"\r\nendef\r\nexport PROJ_p1\r\n\r\ndefine PROJ_p2\r\n  ...\r\nendef\r\nexport PROJ_p2\r\n```\r\n\r\nYou may also export common settings used by all projects directly, e.g.:\r\n\r\n```makefile\r\nexport THREADS = y\r\n```\r\n\r\nNow is a good time to define which projects should be affected by commands\r\nby default.  E.g.:\r\n\r\n```makefile\r\nifndef SUBPROJS\r\n  export SUBPROJS = p1 p2\r\nendif\r\n```\r\n\r\nThis will automatically generate a given target for all those subprojects\r\nif this variable has not been defined in the shell environment or in the\r\ncommand line of the make-invocation by the user.  E.g., `make dc` will\r\ngenerate debug code for all subprojects.\r\n\r\nNow you need to define a default action for your subprojects if `make`\r\nhas been called without arguments:\r\n\r\n```makefile\r\nall: bc\r\n```\r\n\r\nThis will build byte code by default for all subprojects.\r\n\r\nFinally, you'll have to define a catch-all target that uses the target provided\r\nby the user for all subprojects.  Just add (assuming that OCAMLMAKEFILE has\r\nbeen defined appropriately):\r\n\r\n  %:\r\n          @make -f $(OCAMLMAKEFILE) subprojs SUBTARGET=$@\r\n\r\nSee the `threads`-directory in the distribution for a short example!\r\n\r\n### Optional `OCamlMakefile` variables\r\n\r\n```text\r\n* LIB_PACK_NAME - packs all modules of a library into a module whose\r\n                  name is given in variable LIB_PACK_NAME.\r\n\r\n* RES_CLIB_SUF  - when building a library that contains C-stubs, this\r\n                  variable controls the suffix appended to the name of\r\n                  the C-library (default: _stubs).\r\n\r\n* THREADS       - say THREADS = yes if you need thread support compiled in,\r\n                  otherwise leave it away.\r\n\r\n* VMTHREADS     - say VMTHREADS = yes if you want to force VM-level\r\n                  scheduling of threads (byte-code only).\r\n\r\n* ANNOTATE      - say ANNOTATE = yes to generate type annotation files\r\n                  (.annot) to support displaying of type information\r\n                  in editors.\r\n\r\n* USE_CAMLP4    - say USE_CAMLP4 = yes in your Makefile if you\r\n                  want to include the camlp4 directory during the build\r\n                  process, otherwise leave it away.\r\n\r\n* INCDIRS       - directories that should be searched for .cmi- and\r\n                  .cmo-files.  You need not write -I ... - just the\r\n                  plain names.\r\n* LIBDIRS       - directories that should be searched for libraries\r\n                  Also just put the plain paths into this variable\r\n* EXTLIBDIRS    - Same as LIBDIRS, but paths in this variable are\r\n                  also added to the binary via the -R-flag so that\r\n                  dynamic libraries in non-standard places can be found.\r\n* RESULTDEPS    - Targets on which results (executables or libraries)\r\n                  should additionally depend.\r\n\r\n* PACKS         - adds packages under control of findlib.\r\n\r\n* PREDS         - specifies findlib-predicates.\r\n\r\n* LIBS          - OCaml-libraries that should be linked (just plain names).\r\n                  E.g. if you want to link the Str-library, just write\r\n                  str (without quotes).  The new OCaml-compiler handles\r\n                  libraries in such a way that they \"remember\" whether\r\n                  they have to be linked against a C-library and it gets\r\n                  linked in automatically.  If there is a slash in the\r\n                  library name (such as ./str or lib/foo) then make is\r\n                  told that the generated files depend on the library.\r\n                  This helps to ensure that changes to your libraries\r\n                  are taken into account, which is important if you are\r\n                  regenerating your libraries frequently.\r\n\r\n* CLIBS         - C-libraries that should be linked (just plain names).\r\n\r\n* PRE_TARGETS   - set this to a list of target files that you want\r\n                  to have built before dependency calculation actually\r\n                  takes place.  E.g. use this to automatically compile\r\n                  modules needed by camlp4, which have to be available\r\n                  before other modules can be parsed at all.\r\n\r\n                  ** WARNING **: the files mentioned in this variable\r\n                  will be removed when make clean is executed!\r\n\r\n* LIBINSTALL_FILES - the files of a library that should be installed\r\n                    using findlib.  Default:\r\n\r\n                      $(RESULT).mli $(RESULT).cmi $(RESULT).cma\r\n                      $(RESULT).cmxa $(RESULT).a lib$(RESULT).a\r\n\r\n* OCAML_LIB_INSTALL - target directory for rawinstall/rawuninstall.\r\n                      (default: $(OCAMLLIBPATH)/contrib)\r\n\r\n* DOC_FILES     - names of files from which documentation is generated.\r\n                  (default: all .mli-files in your $(SOURCES)).\r\n\r\n* DOC_DIR       - name of directory where documentation should be stored.\r\n\r\n* OCAMLFLAGS    - flags passed to the compilers\r\n* OCAMLBCFLAGS  - flags passed to the byte code compiler only\r\n* OCAMLNCFLAGS  - flags passed to the native code compiler only\r\n\r\n* OCAMLLDFLAGS  - flags passed to the OCaml-linker\r\n* OCAMLBLDFLAGS - flags passed to the OCaml-linker when linking byte code\r\n* OCAMLNLDFLAGS - flags passed to the OCaml-linker when linking\r\n                  native code\r\n\r\n* OCAMLMKLIB_FLAGS - flags passed to the OCaml library tool\r\n\r\n* OCAMLCPFLAGS  - profiling flags passed to ocamlcp (default: a)\r\n\r\n* PPFLAGS       - additional flags passed to the preprocessor\r\n                  (default: none)\r\n\r\n* LFLAGS        - flags passed to ocamllex\r\n* YFLAGS        - flags passed to ocamlyacc\r\n* IDLFLAGS      - flags passed to camlidl\r\n\r\n* OCAMLDOCFLAGS - flags passed to ocamldoc\r\n\r\n* OCAMLFIND_INSTFLAGS - flags passed to ocamlfind during installation\r\n                        (default: none)\r\n\r\n* DVIPSFLAGS    - flags passed to dvips\r\n                  (when generating documentation in PostScript).\r\n\r\n* STATIC        - set this variable if you want to force creation\r\n                  of static libraries\r\n\r\n* CC            - the C-compiler to be used\r\n* CXX           - the C++-compiler to be used\r\n\r\n* CFLAGS        - additional flags passed to the C-compiler.\r\n\r\n                  The flag -DNATIVE_CODE will be passed automatically if\r\n                  you choose to build native code.  This allows you to\r\n                  compile your C-files conditionally.  But please note:\r\n                  You should do a make clean or remove the object files\r\n                  manually or touch the %.c-files: otherwise, they may\r\n                  not be correctly recompiled between different builds.\r\n\r\n* CXXFLAGS      - additional flags passed to the C++-compiler.\r\n\r\n* CPPFLAGS      - additional flags passed to the C-preprocessor.\r\n\r\n* CFRAMEWORKS   - Objective-C framework to pass to linker on MacOS X.\r\n\r\n* LDFLAGS       - additional flags passed to the C-linker\r\n\r\n* RPATH_FLAG    - flag passed through to the C-linker to set a path for\r\n                  dynamic libraries.  May need to be set by user on\r\n                  exotic platforms.  (default: -R).\r\n\r\n* ELF_RPATH_FLAG - this flag is used to set the rpath on ELF-platforms.\r\n                  (default: -R)\r\n\r\n* ELF_RPATH     - if this flag is yes, then the RPATH_FLAG will be\r\n                  passed by -Wl to the linker as normal on ELF-platforms.\r\n\r\n* OCAMLLIBPATH  - path to the OCaml-standard-libraries\r\n                  (first default: $(OCAMLC) -where)\r\n                  (second default: /usr/local/lib/ocaml)\r\n\r\n* OCAML_DEFAULT_DIRS - additional path in which the user can supply\r\n                      default directories to his own collection\r\n                      of libraries.  The idea is to pass this as an\r\n                      environment variable so that the Makefiles do not\r\n                      have to contain this path all the time.\r\n\r\n* OCAMLFIND     - ocamlfind from findlib       (default: ocamlfind)\r\n* OCAML         - OCaml interpreter            (default: ocaml)\r\n* OCAMLC        - byte-code compiler           (default: ocamlc)\r\n* OCAMLOPT      - native-code compiler         (default: ocamlopt)\r\n* OCAMLMKTOP    - top-level compiler           (default: ocamlmktop)\r\n* OCAMLCP       - profiling byte-code compiler (default: ocamlcp)\r\n* OCAMLDEP      - dependency generator         (default: ocamldep)\r\n\r\n* OCAMLLEX      - scanner generator            (default: ocamllex)\r\n                  Applies to .mll files.\r\n\r\n* OCAMLYACC     - parser generator             (default: ocamlyacc)\r\n                  Applies to .mly files.  A good alternative to the default is\r\n                  \"menhir\" if installed.\r\n\r\n* OCAMLMKLIB    - tool to create libraries     (default: ocamlmklib)\r\n* CAMLIDL       - IDL-code generator           (default: camlidl)\r\n* CAMLIDLDLL    - IDL-utility                  (default: camlidldll)\r\n* CAMLP4        - camlp4 preprocessor          (default: camlp4)\r\n* OCAMLDOC      - OCamldoc-command             (default: ocamldoc)\r\n\r\n* LATEX         - Latex-processor              (default: latex)\r\n* DVIPS         - dvips-command                (default: dvips)\r\n* PS2PDF        - PostScript-to-PDF converter  (default: ps2pdf)\r\n\r\n* CAMELEON_REPORT - report tool of Cameleon    (default: report)\r\n* CAMELEON_REPORT_FLAGS - flags for the report tool of Cameleon\r\n\r\n* CAMELEON_ZOGGY - zoggy tool of Cameleon\r\n                  (default: camlp4o pa_zog.cma pr_o.cmo)\r\n* CAMELEON_ZOGGY_FLAGS - flags for the zoggy tool of Cameleon\r\n\r\n* OCAML_GLADECC - Glade compiler for OCaml  (default: lablgladecc2)\r\n* OCAML_GLADECC_FLAGS - flags for the Glade compiler\r\n\r\n* OXRIDL        - OXRIDL-generator  (default: oxridl)\r\n\r\n* NOIDLHEADER   - set to yes to prohibit OCamlMakefile from using\r\n                  the default camlidl-flag -header.\r\n\r\n* NO_CUSTOM     - Prevent linking in custom mode.\r\n\r\n* QUIET         - unsetting this variable (e.g. make QUIET=)\r\n                  will print all executed commands, including intermediate\r\n                  ones.  This allows more comfortable debugging when\r\n                  things go wrong during a build.\r\n\r\n* REALLY_QUIET  - when set this flag turns off output from some commands.\r\n\r\n* OCAMLMAKEFILE - location of (= path to) this OCamlMakefile.\r\n                  Because it calls itself recursively, it has to know\r\n                  where it is. (default: OCamlMakefile = local directory)\r\n\r\n* BCSUFFIX      - Suffix for all byte-code files.  E.g.:\r\n\r\n                    RESULT   = foo\r\n                    BCSUFFIX = _bc\r\n\r\n                  This will produce byte-code executables/libraries with\r\n                  basename foo_bc.\r\n\r\n* NCSUFFIX      - Similar to BCSUFFIX, but for native-code files.\r\n* TOPSUFFIX     - Suffix added to toplevel interpreters (default: .top)\r\n\r\n* SUBPROJS      - variable containing the names of subprojects to be\r\n                  compiled.\r\n\r\n* SUBTARGET     - target to be built for all projects in variable\r\n                  SUBPROJS.\r\n```\r\n\r\n### Optional variables for Windows users\r\n\r\n```text\r\n* MINGW         - variable to detect the MINGW-environment\r\n* MSVC          - variable to detect the MSVC-compiler\r\n```\r\n\r\n---------------------------------------------------------------------------\r\n\r\nContact Information and Contributing\r\n------------------------------------\r\n\r\nIn the case of bugs, feature requests, contributions and similar, you can\r\ncontact me here: <markus.mottl@gmail.com>\r\n\r\nUp-to-date information concerning this tool should be available at:\r\n<http://mmottl.github.io/ocaml-makefile>\r\n\r\nEnjoy!\r\n\r\nMarkus Mottl in Rutherford, NJ on March 2, 2015\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}